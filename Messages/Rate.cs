// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rate.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Messages {

  /// <summary>Holder for reflection information generated from rate.proto</summary>
  public static partial class RateReflection {

    #region Descriptor
    /// <summary>File descriptor for rate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpyYXRlLnByb3RvEghNZXNzYWdlcyIuCgRSYXRlEg4KBlJhdGVJZBgBIAEo",
            "BRIWCg5QYWlyc1Nob3J0TmFtZRgCIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Rate), global::Messages.Rate.Parser, new[]{ "RateId", "PairsShortName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Rate : pb::IMessage<Rate> {
    private static readonly pb::MessageParser<Rate> _parser = new pb::MessageParser<Rate>(() => new Rate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.RateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rate(Rate other) : this() {
      rateId_ = other.rateId_;
      pairsShortName_ = other.pairsShortName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rate Clone() {
      return new Rate(this);
    }

    /// <summary>Field number for the "RateId" field.</summary>
    public const int RateIdFieldNumber = 1;
    private int rateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateId {
      get { return rateId_; }
      set {
        rateId_ = value;
      }
    }

    /// <summary>Field number for the "PairsShortName" field.</summary>
    public const int PairsShortNameFieldNumber = 2;
    private string pairsShortName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PairsShortName {
      get { return pairsShortName_; }
      set {
        pairsShortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RateId != other.RateId) return false;
      if (PairsShortName != other.PairsShortName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RateId != 0) hash ^= RateId.GetHashCode();
      if (PairsShortName.Length != 0) hash ^= PairsShortName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RateId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RateId);
      }
      if (PairsShortName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PairsShortName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RateId);
      }
      if (PairsShortName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PairsShortName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rate other) {
      if (other == null) {
        return;
      }
      if (other.RateId != 0) {
        RateId = other.RateId;
      }
      if (other.PairsShortName.Length != 0) {
        PairsShortName = other.PairsShortName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RateId = input.ReadInt32();
            break;
          }
          case 18: {
            PairsShortName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
